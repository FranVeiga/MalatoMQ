// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protos/message.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MQ_SendMessage_FullMethodName    = "/protos.MQ/SendMessage"
	MQ_ConsumeMessage_FullMethodName = "/protos.MQ/ConsumeMessage"
)

// MQClient is the client API for MQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MQClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Message, Response], error)
	ConsumeMessage(ctx context.Context, in *QueueName, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
}

type mQClient struct {
	cc grpc.ClientConnInterface
}

func NewMQClient(cc grpc.ClientConnInterface) MQClient {
	return &mQClient{cc}
}

func (c *mQClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Message, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MQ_ServiceDesc.Streams[0], MQ_SendMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Message, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MQ_SendMessageClient = grpc.ClientStreamingClient[Message, Response]

func (c *mQClient) ConsumeMessage(ctx context.Context, in *QueueName, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MQ_ServiceDesc.Streams[1], MQ_ConsumeMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueueName, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MQ_ConsumeMessageClient = grpc.ServerStreamingClient[Message]

// MQServer is the server API for MQ service.
// All implementations must embed UnimplementedMQServer
// for forward compatibility.
type MQServer interface {
	SendMessage(grpc.ClientStreamingServer[Message, Response]) error
	ConsumeMessage(*QueueName, grpc.ServerStreamingServer[Message]) error
	mustEmbedUnimplementedMQServer()
}

// UnimplementedMQServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMQServer struct{}

func (UnimplementedMQServer) SendMessage(grpc.ClientStreamingServer[Message, Response]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMQServer) ConsumeMessage(*QueueName, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeMessage not implemented")
}
func (UnimplementedMQServer) mustEmbedUnimplementedMQServer() {}
func (UnimplementedMQServer) testEmbeddedByValue()            {}

// UnsafeMQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MQServer will
// result in compilation errors.
type UnsafeMQServer interface {
	mustEmbedUnimplementedMQServer()
}

func RegisterMQServer(s grpc.ServiceRegistrar, srv MQServer) {
	// If the following call pancis, it indicates UnimplementedMQServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MQ_ServiceDesc, srv)
}

func _MQ_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MQServer).SendMessage(&grpc.GenericServerStream[Message, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MQ_SendMessageServer = grpc.ClientStreamingServer[Message, Response]

func _MQ_ConsumeMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueueName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MQServer).ConsumeMessage(m, &grpc.GenericServerStream[QueueName, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MQ_ConsumeMessageServer = grpc.ServerStreamingServer[Message]

// MQ_ServiceDesc is the grpc.ServiceDesc for MQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MQ",
	HandlerType: (*MQServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _MQ_SendMessage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ConsumeMessage",
			Handler:       _MQ_ConsumeMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/message.proto",
}
